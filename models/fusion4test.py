from tensorflow import keras
from tensorflow import keras
from keras.models import *
from keras.layers import *
from keras.optimizers import *
from keras.utils.vis_utils import plot_model
from keras import layers
import numpy as np
#Cnn encoder
# d--transpose encoder no.1 res c----resnet
def cnn_encoder4plusfusion():
        s = keras.layers.Input(shape=[80,80,80,5], name='lvae_encoder_inputs')
        # s=  keras.layers.Reshape([80,80,80,5], input_shape=[80,80,80,5])
        #d--->[5,80,80,80], e--->[80,5,80,80], f--->[80,80,5,80], c--->[80,80,80,5]

        #----d encoder[5,80,80,80] 1st block
        d = tf.transpose(s, [0,4,1,2,3])
        print('d shape should be (5,80,80,80) and is ', d.shape) #(5,80,80,80) 
        d1planb = keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d) #(3,40,40,40)
        d1planb = tf.transpose(d1planb,[0,2,3,4,1])#(40,40,40,3)
        d1= keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d) #(3,40,40,40)
        d1= keras.layers.BatchNormalization(trainable=True)(d1)
        d1= keras.layers.Dropout(0.1)(d1)   #(3,40,40,40)
        d1= keras.layers.Conv3D(40,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d1) #(3,40,40,40)
        d1= keras.layers.BatchNormalization(trainable=True)(d1)
        d1= keras.layers.Dropout(0.1)(d1)   #(3,40,40,40)
        d1 = tf.transpose(d1,[0,2,3,4,1])#(40,40,40,3)
        d1 = keras.layers.concatenate([d1planb,d1])#(40,40,40,6)
        #----e encoder[80,5,80,80] 1st block
        e = tf.transpose(s,[0,1,4,2,3])#(80,5,80,80)
        print('e shape should be (80,5,80,80) and is ', e.shape)  #(80,5,80,80)
        e1planb = keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e) #(40,3,40,40)
        e1planb = tf.transpose(e1planb,[0,1,3,4,2])#(40,40,40,3)
        e1= keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e) #(40,3,40,40)
        e1= keras.layers.BatchNormalization(trainable=True)(e1)
        e1= keras.layers.Dropout(0.1)(e1)   #(3,40,40,40)
        e1= keras.layers.Conv3D(40,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e1) #(40,3,40,40)
        e1= keras.layers.BatchNormalization(trainable=True)(e1)
        e1= keras.layers.Dropout(0.1)(e1)   #(3,40,40,40)
        e1 = tf.transpose(e1,[0,1,3,4,2])#(40,40,40,3)
        e1 = keras.layers.concatenate([e1planb,e1])#(40,40,40,6)
        #-----f encoder[80,80,5,80] 1st block
        f = tf.transpose(s,[0,1,2,4,3])#(80,80,5,80)
        print('f shape should be (80,80,5,80) and is ', f.shape)  #(80,80,5,80)
        f1planb = keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f) #(40,40,3,40)
        f1planb = tf.transpose(f1planb,[0,1,2,4,3])#(40,40,40,3)
        print("f1planb", f1planb.shape)
        f1= keras.layers.Conv3D(40,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f) #(40,40,3,40)
        f1= keras.layers.BatchNormalization(trainable=True)(f1)
        f1= keras.layers.Dropout(0.1)(f1) #(40,40,3,40)
        f1= keras.layers.Conv3D(40,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f1) #(40,40,3,40)
        f1= keras.layers.BatchNormalization(trainable=True)(f1)
        f1= keras.layers.Dropout(0.1)(f1) #(40,40,3,40)
        f1 = tf.transpose(f1,[0,1,2,4,3])#(40,40,40,3)
        f1 = keras.layers.concatenate([f1planb,f1])#(40,40,40,6)
        #-----c encoder[80,80,80,5] 1st block
        c1planb = keras.layers.Conv3D(4,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(s) #(40, 40, 40, 4)
        c1= keras.layers.Conv3D(4,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(s) #(40, 40, 40, 4)
        c1= keras.layers.BatchNormalization(trainable=True)(c1)
        #c1= keras.layers.relu()(c1)
        c1= keras.layers.Dropout(0.1)(c1)   #(40, 40, 40, 4)
        #d1= keras.layers.relu()(c1)
        c1= keras.layers.Conv3D(4,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c1)#(40, 40, 40, 4)
        c1= keras.layers.BatchNormalization(trainable=True)(c1)
        #c1= keras.layers.relu()(c1)
        c1= keras.layers.Dropout(0.1)(c1)   #(40, 40, 40, 4)
        c1= keras.layers.concatenate([c1planb,c1]) #RES(40, 40, 40, 8)
        #c1= keras.layers.relu()(c1) 
        firstfusion = keras.layers.concatenate([d1,e1,f1,c1])#(40, 40, 40, 26)
        print('first fusion should be (40, 40, 40, 26) and is ',firstfusion.shape)#(40, 40, 40, 26)
        print('first fusion should be (40, 40, 40, 26) and is ',firstfusion.shape)#(40, 40, 40, 26)
        firstfusionblock = keras.layers.Conv3D(26,3,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(firstfusion)#(40, 40, 40, 26)
        firstfusionblock = keras.activations.sigmoid(firstfusionblock)#(40, 40, 40, 26)
        firstfusion = firstfusion * firstfusionblock#(40, 40, 40, 26)
        firstfusion = keras.layers.Conv3D(20,1,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(firstfusion)#(40, 40, 40, 20)
        print('first fusion should be (40, 40, 40, 20) and is ',firstfusion.shape)#(40, 40, 40, 20)
        print('first fusion should be (40, 40, 40, 20) and is ',firstfusion.shape)#(40, 40, 40, 20)

        #----d encoder 2nd block
        d1 = tf.transpose(d1,[0,4,1,2,3])#(6,40,40,40)
        print('d1 shape should be (6,40,40,40) and is ', d1.shape)  #(6,40,40,40)
        d2planb = keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d1) #(3,20,20,20)
        d2planb = tf.transpose(d2planb,[0,2,3,4,1])#(20,20,20,3)
        d2= keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d1) #(3,20,20,20)
        d2= keras.layers.BatchNormalization(trainable=True)(d2)
        d2= keras.layers.Dropout(0.1)(d2)   #(3,20,20,20)
        d2= keras.layers.Conv3D(20,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d2) #(3,20,20,20)
        d2= keras.layers.BatchNormalization(trainable=True)(d2)
        d2= keras.layers.Dropout(0.1)(d2)   #(3,20,20,20)
        d2 = tf.transpose(d2,[0,2,3,4,1])#(20,20,20,3)
        d2 = keras.layers.concatenate([d2planb,d2])#(20,20,20,6)
        #----e encoder 2nd block
        e1 = tf.transpose(e1,[0,1,4,2,3])#(40,6,40,40)
        print('e1 shape should be (40,6,40,40) and is ', e1.shape)  #(40,6,40,40)
        e2planb = keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e1) #(20,3,20,20)
        e2planb = tf.transpose(e2planb,[0,1,3,4,2])#(20,20,20,3)
        e2= keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e1) #(20,3,20,20)
        e2= keras.layers.BatchNormalization(trainable=True)(e2)
        e2= keras.layers.Dropout(0.1)(e2)   #(20,3,20,20)
        e2= keras.layers.Conv3D(20,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e2) #(20,3,20,20)
        e2= keras.layers.BatchNormalization(trainable=True)(e2)
        e2= keras.layers.Dropout(0.1)(e2)   #(20,3,20,20)
        e2 = tf.transpose(e2,[0,1,3,4,2])#(20,20,20,3)
        e2 = keras.layers.concatenate([e2planb,e2])#(20,20,20,6)
        #----f encoder 2nd block
        f1 = tf.transpose(f1,[0,1,2,4,3])#(40,40,6,40)
        print('f1 shape should be (40,40,6,40) and is ', f1.shape)  #(40,40,6,40)
        f2planb = keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f1) #(20,20,3,20)
        f2planb = tf.transpose(f2planb,[0,1,2,4,3])#(20,20,20,3)
        f2= keras.layers.Conv3D(20,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f1) #(20,20,3,20)
        f2= keras.layers.BatchNormalization(trainable=True)(f2)
        f2= keras.layers.Dropout(0.1)(f2)   #(20,20,3,20)
        f2= keras.layers.Conv3D(20,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f2) #(20,20,3,20)
        f2= keras.layers.BatchNormalization(trainable=True)(f2)
        f2= keras.layers.Dropout(0.1)(f2)   #(20,20,3,20)
        f2 = tf.transpose(f2,[0,1,2,4,3])#(20,20,20,3)
        f2 = keras.layers.concatenate([f2planb,f2])#(20,20,20,6)
        #----c encoder 2nd block
        c2planb = keras.layers.Conv3D(16,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c1) #(20, 20, 20, 16)
        c2= keras.layers.Conv3D(16,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c1) #(20, 20, 20, 16)
        c2= keras.layers.BatchNormalization(trainable=True)(c2)
        #c2= keras.layers.relu()(c2)
        c2= keras.layers.Dropout(0.1)(c2)
        #c2= keras.layers.relu()(c2)
        c2= keras.layers.Conv3D(16,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c2) #(20, 20, 20, 16)
        c2= keras.layers.BatchNormalization(trainable=True)(c2)
        #c2= keras.layers.relu()(c2)
        c2= keras.layers.Dropout(0.1)(c2)
        c2= keras.layers.concatenate([c2planb,c2]) #RES(20, 20, 20, 32)
        #c2= keras.layers.relu()(c2) #RES(20, 20, 20, 32)
        secondfusion = keras.layers.concatenate([d2,e2,f2,c2])#(20, 20, 20, 50)
        print('second fusion should be (20, 20, 20, 50) and is ',secondfusion.shape)#(20, 20, 20, 50)
        print('second fusion should be (20, 20, 20, 50) and is ',secondfusion.shape)#(20, 20, 20, 50)
        secondfusionblock = keras.layers.Conv3D(50,3,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(secondfusion)#(20, 20, 20, 50)
        secondfusionblock = keras.activations.sigmoid(secondfusionblock)#(20, 20, 20, 50)
        secondfusion = secondfusion * secondfusionblock #(20, 20, 20, 50)
        secondfusion = keras.layers.Conv3D(30,1,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(secondfusion)#(20, 20, 20, 30)
        print('second fusion should be (20, 20, 20, 30) and is ',secondfusion.shape)#(20, 20, 20, 30)
        print('second fusion should be (20, 20, 20, 30) and is ',secondfusion.shape)#(20, 20, 20, 30)


        #----d encoder 3rd block
        d2 = tf.transpose(d2,[0,4,1,2,3])#(6,20,20,20)
        print('d2 shape should be (6,20,20,20) and is ', d2.shape)  #(6,20,20,20)
        d3planb = keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d2) #(3,10,10,10)
        d3planb = tf.transpose(d3planb,[0,2,3,4,1])#(10,10,10,3)
        d3= keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d2) #(3,10,10,10)
        d3= keras.layers.BatchNormalization(trainable=True)(d3)
        d3= keras.layers.Dropout(0.1)(d3)   #(3,10,10,10)
        d3= keras.layers.Conv3D(10,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d3) #(3,10,10,10)
        d3= keras.layers.BatchNormalization(trainable=True)(d3)
        d3= keras.layers.Dropout(0.1)(d3)   #(3,10,10,10)
        d3 = tf.transpose(d3,[0,2,3,4,1])#(10,10,10,3)
        d3 = keras.layers.concatenate([d3planb,d3])#(10,10,10,6)
        #----e encoder 3rd block
        e2 = tf.transpose(e2,[0,1,4,2,3])#(20,6,20,20)
        print('e2 shape should be (20,6,20,20) and is ', e2.shape)  #(20,6,20,20)
        e3planb = keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e2) #(10,3,10,10)
        e3planb = tf.transpose(e3planb,[0,1,3,4,2])#(10,10,10,3)
        e3= keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e2) #(10,3,10,10)
        e3= keras.layers.BatchNormalization(trainable=True)(e3)
        e3= keras.layers.Dropout(0.1)(e3)   #(10,3,10,10)
        e3= keras.layers.Conv3D(10,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e3) #(10,3,10,10)
        e3= keras.layers.BatchNormalization(trainable=True)(e3)
        e3= keras.layers.Dropout(0.1)(e3)   #(10,3,10,10)
        e3 = tf.transpose(e3,[0,1,3,4,2])#(10,10,10,3)
        e3 = keras.layers.concatenate([e3planb,e3])#(10,10,10,6)
        #----f encoder 3rd block
        f2 = tf.transpose(f2,[0,1,2,4,3])#(20,20,6,20)
        print('f2 shape should be (20,20,6,20) and is ', f2.shape)  #(20,20,6,20)
        f3planb = keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f2) #(10,10,3,10)
        f3planb = tf.transpose(f3planb,[0,1,2,4,3])#(10,10,10,3)
        f3= keras.layers.Conv3D(10,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f2) #(10,10,3,10)
        f3= keras.layers.BatchNormalization(trainable=True)(f3)
        f3= keras.layers.Dropout(0.1)(f3)   #(10,10,3,10)
        f3= keras.layers.Conv3D(10,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f3) #(10,10,3,10)
        f3= keras.layers.BatchNormalization(trainable=True)(f3)
        f3= keras.layers.Dropout(0.1)(f3)   #(10,10,3,10)
        f3 = tf.transpose(f3,[0,1,2,4,3])#(10,10,10,3)
        f3 = keras.layers.concatenate([f3planb,f3])#(10,10,10,6)
        #----c encoder 3rd block
        c3planb = keras.layers.Conv3D(64,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c2) #(10, 10, 10, 64)
        c3= keras.layers.Conv3D(64,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c2) #(10, 10, 10, 64)
        c3= keras.layers.BatchNormalization(trainable=True)(c3)
        #c3= keras.layers.relu()(c3)
        c3= keras.layers.Dropout(0.1)(c3)
        c3= keras.layers.Conv3D(64,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c3)#(10, 10, 10, 64)
        c3= keras.layers.BatchNormalization(trainable=True)(c3)
        #c3= keras.layers.relu()(c3)
        c3= keras.layers.Dropout(0.1)(c3)
        c3= keras.layers.concatenate([c3planb,c3])#RES(10, 10, 10, 128)
        #c3= keras.layers.relu()(c3)#RES(10, 10, 10, 128)
        thirdfusion = keras.layers.concatenate([d3,e3,f3,c3])#(10, 10, 10, 146)
        print('third fusion should be (10, 10, 10, 146) and is ',thirdfusion.shape)#(10, 10, 10, 146)
        print('third fusion should be (10, 10, 10, 146) and is ',thirdfusion.shape)#(10, 10, 10, 146)
        thirdfusionblock = keras.layers.Conv3D(146,3,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(thirdfusion)#(20, 20, 20, 50)
        thirdfusionblock = keras.activations.sigmoid(thirdfusionblock)#(10, 10, 10, 146)
        thirdfusion = thirdfusion * thirdfusionblock #(10, 10, 10, 146)
        thirdfusion = keras.layers.Conv3D(40,1,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(thirdfusion)#(10, 10, 10, 40)
        print('third fusion should be (10, 10, 10, 40) and is ',thirdfusion.shape)#(10, 10, 10, 40)
        print('third fusion should be (10, 10, 10, 40) and is ',thirdfusion.shape)#(10, 10, 10, 40)

        #----d encoder 4th block
        d3 = tf.transpose(d3,[0,4,1,2,3])#(6,10,10,10)
        print('d3 shape should be (6,10,10,10) and is', d3.shape)  #(6,10,10,10)
        d4planb = keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d3) #(3,5,5,5)
        d4planb = tf.transpose(d4planb,[0,2,3,4,1])#(5,5,5,3)
        d4= keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d3) #(3,5,5,5)
        d4= keras.layers.BatchNormalization(trainable=True)(d4)
        d4= keras.layers.Dropout(0.1)(d4)   #(3,5,5,5)
        d4= keras.layers.Conv3D(5,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(d4) #(3,5,5,5)
        d4= keras.layers.BatchNormalization(trainable=True)(d4)
        d4= keras.layers.Dropout(0.1)(d4)   #(3,5,5,5)
        d4 = tf.transpose(d4,[0,2,3,4,1])#(5,5,5,3)
        d4 = keras.layers.concatenate([d4planb,d4])#(5,5,5,6)  
        #----e encoder 4th block
        e3 = tf.transpose(e3,[0,1,4,2,3])#(10,6,10,10)
        print('e3 shape should be (10,6,10,10) and is', e3.shape)  #(10,6,10,10)
        e4planb = keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e3) #(5,3,5,5)
        e4planb = tf.transpose(e4planb,[0,1,3,4,2])#(5,5,5,3)
        e4= keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e3) #(5,3,5,5)
        e4= keras.layers.BatchNormalization(trainable=True)(e4)
        e4= keras.layers.Dropout(0.1)(e4)   #(5,3,5,5)
        e4= keras.layers.Conv3D(5,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(e4) #(5,3,5,5)
        e4= keras.layers.BatchNormalization(trainable=True)(e4)
        e4= keras.layers.Dropout(0.1)(e4)   #(5,3,5,5)
        e4 = tf.transpose(e4,[0,1,3,4,2])#(5,5,5,3)
        e4 = keras.layers.concatenate([e4planb,e4])#(5,5,5,6)  
        #----f encoder 4th block
        f3 = tf.transpose(f3,[0,1,2,4,3])#(10,10,6,10)
        print('f3 shape should be (10,10,6,10) and is', f3.shape)  #(10,10,6,10)
        f4planb = keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f3) #(5,5,3,5)
        f4planb = tf.transpose(f4planb,[0,1,2,4,3])#(5,5,5,3)
        f4= keras.layers.Conv3D(5,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f3) #(5,5,3,5)
        f4= keras.layers.BatchNormalization(trainable=True)(f4)
        f4= keras.layers.Dropout(0.1)(f4)   #(5,5,3,5)
        f4= keras.layers.Conv3D(5,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(f4) #(5,5,3,5)
        f4= keras.layers.BatchNormalization(trainable=True)(f4)
        f4= keras.layers.Dropout(0.1)(f4)   #(5,5,3,5)
        f4 = tf.transpose(f4,[0,1,2,4,3])#(5,5,5,3)
        f4 = keras.layers.concatenate([f4planb,f4])#(5,5,5,6)  
        #----c encoder 4th block
        c4planb= keras.layers.Conv3D(128,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c3) #(5, 5, 5, 128)
        c4= keras.layers.Conv3D(128,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c3) #(5, 5, 5, 128)
        c4= keras.layers.BatchNormalization(trainable=True)(c4)
        #c4= keras.layers.relu()(c4)
        c4= keras.layers.Dropout(0.1)(c4)
        c4= keras.layers.Conv3D(128,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(c4)
        c4= keras.layers.BatchNormalization(trainable=True)(c4)
        #c4= keras.layers.relu()(c4)
        c4= keras.layers.Dropout(0.1)(c4)
        c4= keras.layers.concatenate([c4planb,c4])#RES(5, 5, 5, 256)
        #c4= keras.layers.relu()(c4)
        fourthfusion = keras.layers.concatenate([d4,e4,f4,c4])#(5, 5, 5, 274)
        print('fourth fusion should be (5, 5, 5, 274) and is ',fourthfusion.shape)#(5, 5, 5, 274)
        print('fourth fusion should be (5, 5, 5, 274) and is ',fourthfusion.shape)#(5, 5, 5, 274)
        fourthfusionblock = keras.layers.Conv3D(274,3,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(fourthfusion)#(5, 5, 5, 274)
        fourthfusionblock = keras.activations.sigmoid(fourthfusionblock)#(5, 5, 5, 274)
        fourthfusion = fourthfusion * fourthfusionblock #(5, 5, 5, 274)
        fourthfusion = keras.layers.Conv3D(50,1,strides=1, padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(fourthfusion)#(5, 5, 5, 50)
        print('fourth fusion should be (5, 5, 5, 50) and is ',fourthfusion.shape)#(5, 5, 5, 50)
        print('fourth fusion should be (5, 5, 5, 50) and is ',fourthfusion.shape)#(5, 5, 5, 50)

        c5= keras.layers.Conv3D(2,1,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(fourthfusion) #(5, 5, 5, 2)
        print(c5.shape)
        print(c5.shape)
        print(c5.shape)
        print(c5.shape)
        print(c5.shape)
        print(c5.shape)
        f= keras.layers.Flatten()(c5)

        encoder = keras.Model(inputs=[s],
                          outputs=[f, firstfusion, secondfusion, thirdfusion, fourthfusion],
                          name='encoder')
        encoder.summary()
        return encoder

#cnn decoder
def cnn_decoder4plusfusion():
        z = keras.layers.Input(shape=[250], name='lvae_decoder_z_inputs')

        # c1 = keras.layers.Input(shape=[40,40,40,14])
        # c2 = keras.layers.Input(shape=[20,20,20,38])
        # c3 = keras.layers.Input(shape=[10,10,10,134])
        # c4 = keras.layers.Input(shape=[5,5,5,262])
        
        firstfusion = keras.layers.Input(shape=[40,40,40,20])
        secondfusion = keras.layers.Input(shape=[20,20,20,30])
        thirdfusion = keras.layers.Input(shape=[10,10,10,40])
        fourthfusion = keras.layers.Input(shape=[5,5,5,50])

        x= keras.layers.Reshape(target_shape=[5, 5, 5, 2])(z)
    
        x= keras.layers.Conv3DTranspose(64,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(5, 5, 5, 64)
        x= keras.layers.concatenate([x,fourthfusion])#(5, 5, 5, 114)
        print('x should be (5, 5, 5, 114) and is ',x.shape)#(5, 5, 5, 114)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(64,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(5, 5, 5, 64)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)

   
        x= keras.layers.Conv3DTranspose(64,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(10, 10, 10, 64)
        x = keras.layers.concatenate([x,thirdfusion])#(10, 10, 10, 104)
        print('x should be (10, 10, 10, 104) and is ',x.shape)#(10, 10, 10, 104)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(64,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(10, 10, 10, 64)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)
        
        x= keras.layers.Conv3DTranspose(32,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(20, 20, 20, 32)
        x = keras.layers.concatenate([x,secondfusion])#(20, 20, 20, 62)
        print('x should be (20, 20, 20, 62) and is ',x.shape)#(20, 20, 20, 62)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(32,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(20, 20, 20, 32)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)

        x= keras.layers.Conv3DTranspose(32,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(40, 40, 40, 32)
        x = keras.layers.concatenate([x,firstfusion])#(40, 40, 40, 52)
        print('x should be (40, 40, 40, 52) and is ',x.shape)#(40, 40, 40, 52)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(32,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(40, 40, 40, 32)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)

        x= keras.layers.Conv3DTranspose(28,3,strides=2,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(80, 80, 80, 28)
        #x = keras.layers.concatenate([x,c2])
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(28,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(80, 80, 80, 28)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)

        x= keras.layers.Conv3DTranspose(20,3,strides=1,padding='same',activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(80, 80, 80, 20)
        #x = keras.layers.concatenate([x,c1])
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Conv3D(20,3,strides=1,padding='same', activation='selu',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(80, 80, 80, 20)
        x= keras.layers.BatchNormalization(trainable=True)(x)
        x= keras.layers.Dropout(0.1)(x)
        

        x= keras.layers.Conv3DTranspose(10,3,strides=1,padding='same',activation='sigmoid',kernel_initializer=keras.initializers.RandomNormal(0,0.02))(x)#(80, 80, 80, 10)
        
        x= keras.layers.Reshape([80,80,80,10])(x)
        print(x.shape)
        decoder = keras.Model(inputs=[z, firstfusion, secondfusion, thirdfusion, fourthfusion],
                          outputs=[x],
                          name='decoder')
        decoder.summary()
        return decoder
#conv_decoder.summary()

def cnn_model4plusfusion():
    cnn = keras.models.Sequential([cnn_encoder4plusfusion(), cnn_decoder4plusfusion()],name='cnn4encoderplusfusion')
    return cnn

if __name__ == '__main__' :
        print('\n--------------in model cnn.py-------------\n')
        encoder, decoder, model = cnn_encoder4plusfusion(), cnn_decoder4plusfusion(), cnn_model4plusfusion()
        encoder.summary()
        decoder.summary()
        model.summary()
        print('\n-------------end of model cnn.py-------------\n')